[{"id":"5f54fcf184f99b0004db2a0d","questionNumber":1,"questionText":"## Profit Maximization\n\nEmilia, a quantitative researcher, predicts how the closing share price of a stock moves over time.\n\nShe wants to find the maximum possible profit of a stock over a given period of time, using only **one** buy and **one** sell operation according to a given sequence of predicted share prices.\n\n# Constraints\n- Short selling is not allowed.\n- All of the predicted share prices are positive integers.\n\n# Input Format\n\nThe first integer input is the number of predicted days.\n \nThe subsequent integer input is a sequence of positive integers. The element at position ***i*** refers to the predicted share price of a given stock on the **i**th day.\n\n# Output Format\n\nAn integer which is the maximum possible profit with only **one** buy and **one** sell operation.\n\n# Examples\n\n### Example 1\n\nCommand line input: \n```\n14 5 1 6 3 2 5 6 1 3 6 2 5 5 10\n```\n\n`Number of predicted days = 14`\n                               \n`Sequence of predicted share prices = [5,1,6,3,2,5,6,1,3,6,2,5,5,10]`\n\nOutput = 9\n\ni.e. Buy the stock on day 1 for $1 and sell the stock on the last day at $10.\n\n### Example 2\n\nCommand line input:\n```\n8 100 10 12 5 6 14 5 6\n```\n\n`Number of predicted days = 8`\n\n`A sequence of predicted share prices = [100, 10, 12, 5, 6, 14, 5, 6]`\n\nOutput: 9\n\ni.e. Buy the stock on day 3 for $5 and sell the stock on day 5 at $14.","active":true},{"id":"5f54c9ee84f99b0004db1eee","questionNumber":2,"questionText":"## Profit Maximization - Extended\nEmilia can now use multiple buy and sell operations over a given period of time. \n\nGiven a sequence of predicted share prices, she wants to find the maximum possible profit while using the smallest number of trading operations throughout the given time.\n\n# Constraints\n\n- Short selling is not allowed.\n- All of the predicted share prices are positive integers.\n- You can only execute one buy or one sell operation of a share on a given day.\n- Only one share can be bought or sold at a time.\n- You are not required to execute a buy or sell operation every day.\n\n# Input Format\n\nThe first integer input is the number of predicted days.\n\nThe subsequent integer input is a sequence of positive integers. The element at position ***i*** refers to the predicted share price of a given stock on the **i**th day.\n\n# Output Format\n\nAn integer that is the maximum profit using the smallest number of trading operations throughout the given time.\n\n# Examples\n\n### Examples 1 \n\nCommand line input:\n```\n 14 5 1 6 3 2 5 6 1 3 6 2 5 5 10\n```\n\n`Number of predicted days = 14`\n                               \n`A sequence of predicted share prices = [5,1,6,3,2,5,6,1,3,6,2,5,5,10]`\n\nOutput = 22\n\ni.e. The smallest operation required is 8. Emilia can achieve this by buying at ***i*** = 1 when the price is $1 and selling at ***i*** = 2 when the price is $6 for a profit of $5. She can then buy at ***i*** = 4 when the price is $2 and sell at ***i*** = 6 when the price is $6 for a profit of $4. She can then buy at ***i*** = 7 when the price is $1 and sell at ***i*** = 9 when the price is $6 for a profit of $5. Then buy at ***i*** = 10 when the price is $2 and sell at ***i***= 13 when the price is $10 for a profit of $8. If you add up all of the profits from these buy and sell orders (5 + 4 + 5 + 8) the output is 22.\n\n### Examples 2\n\nCommand line input\n```\n8 100 10 12 5 6 14 5 6\n```\n\n`Number of predicted days = 8`\n                               \n`A sequence of predicted share prices = [100, 10, 12, 5, 6, 14, 5, 6]`\n\nOutput = 12\n\ni.e. The smallest operation required is 6. Emilia can achieve this by buying at ***i*** = 1 when the price is $10 and selling at ***i*** = 2 when the price is $12 for a profit of $2. Then she can buy at ***i*** = 3 when the price is $5 and sell at ***i*** = 5 when the price is $14 for a profit of $9. Then buy at ***i*** = 6 when the price is $5 and sell at ***i*** = 7 when the price is $6 for a profit of $1. If you add up all of the profits from these buy and sell orders (2 + 9 + 1) the output is 12.","active":true},{"id":"5f54cb2984f99b0004db1f72","questionNumber":3,"questionText":"## Profit Model for John\n\nJohn has recently started stock trading. He has predicted share prices for a particular company, over the next N days. John wants to analyze this data to build a model which will predict the best day to buy and sell the shares to achieve a specific profit. If there are multiple approaches of buying and selling shares to achieve this profit, John would like to know which of these will achieve the profit the earliest.\n\n\n# Input Format\n\nThe first line contains two integers N and D, where N is the number of days for which he is predicting the share values and D is the number of different profits he would like to achieve.\n\nThe next line contains N space separated integers, where N<sub>i</sub> is the value of the share on the i+1th day.\n\nThe next D lines contain a single integer D<sub>i</sub> , where D<sub>i</sub> is the profit that needs to be made.\n\n# Constraints\n\n- Only 1 share can be bought.\n\n- Short selling is not allowed.\n\n- 1 ≤ N ≤ 100000\n\n- 1 ≤  D ≤ 10\n\n- 1 ≤ N<sub>i</sub>, D<sub>i</sub> ≤ 1000000\n\n# Output Format\n\nPrint in the same line two space separated integers - the day on which the share was bought and the day on which the share was sold. The buy and sell days for different profits should be separated by `,`. If it is not possible to achieve the desirable profit, print -1.\n\n# Examples\n\n### Example 1\n\n### Input\n\n6 2  \n\n3 1 2 1 4 5\n\n3\n\n2\n\n### Output\n\n4 5,3 5\n\n\ni.e. To achieve a profit of 3, John can either buy on day 2 or day 4 and sell on day 5 or he can buy on day 3 and sell on day 6. The approach which takes the minimum number of days is where he buys on day 4 and sells on day 5. So, the answer is 4 5. To achieve a profit of 2, John can either buy on day 1 and sell on day 6 or he can buy on day 3 and sell on day 5. The approach which happens earliest is where John buys on day 3 and sells on day 5.\n \n\n### Example 2\n\n### Input\n\n6 2  \n\n3 6 9 8 2 4 \n\n5\n\n2\n\n### Output\n\n1 4,2 4\n\n\ni.e. To achieve a profit of 5, John can buy on day 1 when the price is 3 and sell on day 4 when the price is 8 for a profit of 5. To achieve a profit of 2, he has two options, buy on day 2 and sell on day 4 or buy on day 5 and sell on day 6. The approach which happens earliest is where John buys on day 2 and sells on day 4.","active":true},{"id":"5f54cbc184f99b0004db1f74","questionNumber":4,"questionText":"## Risk Trading\n\nWhenever a company trades securities, there are various risks involved with the trade. Risk analysis is done for each trade in order to make the maximum profit from that trade. Each available trade can have the following properties:\n\n- Probability that the trade will make a profit (***p***).\n\n- Probability that the trade will make a loss (1-***p***).\n\n- Potential profit of the trade (***x***).\n\n- Potential loss of the trade (***y***).\n    \nFind and print the maximum expected amount of money the company can make by performing at most ***m*** of the ***n*** trades, given the values of ***m***, ***n***, ***x***, ***y*** and ***p***.\n\n\n# Input Format\n\nThe first line contains two space-separated integers denoting the respective values ***n*** (the number of trades available) and ***m*** (the maximum number of trades allowed).\n\nThe second line contains ***p*** space-separated floating-point numbers describing the respective values of ***p***<sub>i</sub>, where each ***p***<sub>i</sub> denotes the probability that the **i**th transaction will result in a profit.\n\nThe third line contains ***x*** space-separated floating-point numbers describing the respective values of ***x***<sub>i</sub>, where each ***x***<sub>i</sub> denotes the potential profit of the **i**th transaction.\n\nThe fourth line contains ***y*** space-separated floating-point numbers describing the respective values of ***y***<sub>i</sub>, where each ***y***<sub>i</sub> denotes the potential loss of the **i**th transaction.\n\n# Constraints\n\n- 1 ≤ ***n***,***m*** ≤ 100000\n\n- 0 ≤ ***x***,***y*** ≤ 100\n\n- 0 ≤ ***p*** ≤ 1\n\n- All ***x***, ***y*** and ***p*** are floating-point numbers scaled to exactly two decimal places (i.e., 2.45 format).\n\n# Output Format\n\nPrint the maximum expected amount of money that can be made by performing at most ***m*** of the ***n*** available trades. Scale your answer to exactly 2 decimal places.\n\n# Examples\n\n### Example 1\n\n### Input\n\n4 3\n\n0.50 0.50 0.50 0.50\n\n4.00 1.00 2.00 3.00\n\n4.00 0.50 1.00 1.00\n\n\n### Output\n\n1.50\n\n\ni.e. There are ***n***=4 transactions available and we can perform at most ***m***=3 of them. We also know the probability that each transaction results in a profit is 0.5. If the third and the fourth transactions are performed, the expected amount of money made from these transactions is: (0.5 * 2.0) - ((1 - 0.5) * 1.0) + (0.5 * 3.0) - ((1 - 0.5) * 1.0) = 1.5. Since this is greater than all of the other possibilities we could calculate, 1.50 is our answer.\n\n### Example 2\n\n### Input\n\n2 2\n\n0.90 0.50\n\n1.00 0.50\n\n100.00 0.40\n\n\n### Output\n\n0.05\n\n\ni.e. There are ***n***=2 transactions available and we can perform at most ***m***=2 of them. We know that the probability the first transaction is profitable is 0.9 and for the second transaction this is 0.5. If the second transaction is performed, the expected amount of money made from this transaction is: (0.5 * 0.5) - ((1 - 0.5) * 0.4) = 0.05. Since this is greater than all of the other possibilities we could calculate, we print 0.05 as our answer.","active":true},{"id":"5f54cc0684f99b0004db1f75","questionNumber":5,"questionText":"## Perfect Matching\n\nCredit Suisse organizes a private banking career information session for its potential future private bankers and currently employed private bankers. There are ***n*** private bankers and ***m*** participants.\n\nAssume for each participant, they want to meet a number of private bankers and similarly, for each private banker they want to recruit a number of participants. However, only one-on-one meetings are possible. So for each session, one participant can only meet one banker.\n\nIf Credit Suisse has a list of preferences from participants and private bankers, how many sessions are needed in order to fulfill everyone's preferences?\n\n# Constraints\n\n- Every banker and participant must have at least one preference.\n\n# Input Format\n\nThe first line relates to the private bankers, and the second line relates to the participants.\n\nThe first integer in each line is the number of bankers/participants.\n\nThe subsequent integer input is the preference of bankers/participants, the preference of each person is separated by `,`.\n\nFor example,\n\n```\n2 1&2,2\n2 1,2\n```  \n\nThe first line of input means that there are two private bankers. The preference of banker 1 is to meet participants 1 & 2, and the preference of banker 2 is to meet participant 2 only. \n\nThe second line of input means that there are two participants. The preference of participant 1 is to meet banker 1 only, and the preference of participant 2 is to meet banker 2 only. \n\n# Output Format\n\nAn integer that is the minimum number of sessions required to fulfill everyone's preferences.\n\n# Examples\n\n### Example 1\n\nCommand line input:\n```\n2 1,2&3\n3 1,2,2\n```\n\nOutput: 2\n\ni.e. In the first session, banker 1 will meet with participant 1 (fulfilling banker 1's preference and participant 1's preference) and banker 2 will meet with participant 2 (fulfilling banker 2's first preference and participant 2's preference). Another session is needed to fulfill banker 2's second preference and participant 3's only preference. In the second session, banker 2 will meet with participant 3 (fulfilling banker 2's second preference and banker 3's preference) and banker 1 will meet with participant 2. After two sessions, everyone's preferences have been fulfilled.\n\n### Example 2\n\nCommand line input:\n```\n3 1,1,1\n3 3,1,1\n```\n\nOutput: 3\n\ni.e. There are many ways to arrive at this solution. This is just one of them. In the first session, banker 1 will meet with participant 1 (fulfilling banker 1's preference), banker 2 will meet with participant 2 and banker 3 will meet with participant 3. In the second session, banker 2 will meet with participant 1 (fulfilling banker 2's preference), banker 3 will meet with participant 2, and banker 1 will meet with participant 3 (fulfilling participant 3's preference). This leaves banker 3, participant 1, and participant 2's preferences. So in the third session, banker 3 will meet with participant 1 (fulfilling banker 3's preference and participant 1's preference), banker 1 will meet with participant 2 (fulfilling participant 2's preference), and banker 2 will meet with participant 3. After three sessions, everyone's preferences have been fulfilled.","active":true},{"id":"5f54cc5584f99b0004db1f76","questionNumber":6,"questionText":"## Encrypting Messages\n\nData encryption prevents data visibility in the event of its unauthorized access.\n\nConsider the following encryption algorithm to encipher a given string input. Firstly, discard all spaces of the string. Then store all the characters within a matrix, according to the constraints below, to get the encoded string output.\n\n# Constraints\n\n- `floor(squareRoot(stringLength)) <= matrixRows <= matrixColumns <= ceil(squareRoot(stringLength))`\n- `matrixRows x matrixColumns >= stringLength`\n- Choose the matrix with the smallest area.\n- Print out the characters of the first column, then embed a space before printing out the following column, etc.\n\n\n# Input Format\n\nA string\n\n# Output Format\n\nAn encrypted string\n\n# Examples\n\n### Example 1\n\nCommand line input:\n```\ncoding\n```\n\nOutput: `ci on dg`\n\ni.e. The string length is 6. The square root of 6 is between 2 and 3. Thus, the string is rewritten as a matrix with 2 rows and 3 columns.\n\n```\ncod\ning\n```\n\n### Example 2\n\nCommand line input:\n```\nits harder to read code than to write it\n```\n\nOutput: `ideeot teatwt srdhr htcai aoont rrdte`\n\ni.e. The string length is 32. The square root of 32 is between 5 and 6. However, 5 x 6 is not >= 32, therefore, the string is rewritten as a matrix with 6 rows and 6 columns.\n```\nitshar\ndertor\neadcod\nethant\nowrite\nit\n```","active":true},{"id":"5f5b64b2609bf600041ee2a6","questionNumber":7,"questionText":"## Q&A community\n\nThere is a Q&A community where users can raise questions and answer questions raised by others, to earn credits. However, there are some users within the community who are suspected to have cheated, therefore, they require validation.\n\nThe following cases are treated as suspicious:\n\n- User A answers User B's question and User B answers User A's question\n- If two or more users, which are considered suspicious, answer user C's question then user C is also considered suspicious.\n\nFind the suspicious users.\n\n# Constraints\n\n- Every user can only ask one question.\n- Any user can answer any question except from their own.\n- 1 < userId < 10000 \n- 1 < Number of questions < 10000\n\n# Input Format\n\nThe first line contains only one integer, which is the number of questions answered in the community.\n\nThe second line contains integers which refer to questions. The first integer is the questioner's ID and the subsequent integer(s) is the answerer's ID(s). Each question detail is separated by `,`. \n\nFor example:\n```\n3\n1 2,2 1,3 1 2\n```   \n\nThere are three questions answered in the community. User 1's question is answered by User 2. User 2's question is answered by User 1. User 3's question is answered by Users 1 & 2.\n\n# Output format\n\nA string that contains all suspicious User ID(s), sorted in ascending order, separated by `,`.\n\nFor example:\n```\n1,2,3\n```\n\n# Examples\n\n### Example 1\n\nCommand line input: \n```\n3\n1 2,2 1,3 1 2\n```\ni.e. Users 1 and 2 answer each other's questions, so they are both suspicious.\nSuspicious Users 1 and 2 answer User 3's question, so User 3 is suspicious.\n\nOutput: `1,2,3`\n\n### Example 2\n\nCommand line input: \n```\n4\n1 2,2 1,3 1 4,4 1 2\n```\ni.e. Users 1 and 2 answer each other's questions, so they are both suspicious.\nSuspicious Users 1 and 2 answer User 4's question, so User 4 is suspicious.\nSuspicious Users 1 and 4 answer User 3's question, so User 3 is suspicious.\n\nOutput: `1,2,3,4`","active":true},{"id":"5f54ccea84f99b0004db1f79","questionNumber":8,"questionText":"## Counting Change\n\nJames has recently started working in a currency exchange office at the airport. As many people are buying different types of currencies before they go on holiday, he ends up working with various types of coins. James would like to find all possible ways of making change for a desired amount using different coins.\n\nFor example, if James has 3 different types of coins, and the value of each is given as 15, 31 and 9, an amount of 63 can be made in two ways: {9, 9, 15, 15, 15} and {9, 9, 9, 9, 9, 9, 9}.\n\nCreate a countNumberOfWays function which returns an integer denoting the number of possible ways to give change.\n\n# Input Format\n\n* The first line\n    * ***n***: an integer, the desired amount.\n    * ***m***: an integer, the number of different coin types.\n    \n* The second line\n    * coins: space-separated distinct integers describing the respective values of each coin.\n    \n# Output Format\n\nAn integer denoting the number of possible ways to make change for the desired amount.\n\n# Examples\n\n### Example 1\n\nCommand line input:\n```\n12 4\n2 3 4 5\n```\n\nOutput: 11 \n\ni.e. There are 11 ways to change ***n*** = 12 using coins with values 2, 3, 4 and 5.\n1. {2, 2, 2, 2, 2, 2}\n2. {2, 2, 2, 2, 4}\n3. {2, 2, 2, 3, 3}\n4. {2, 2, 3, 5}\n5. {2, 2, 4, 4}\n6. {2, 2, 5, 3}\n7. {2, 3, 3, 4}\n8. {3, 3, 3, 3}\n9. {2, 5, 5}\n10. {3, 4, 5}\n11. {4, 4, 4}\n\nThus, we print 11 as our answer.\n\n### Example 2\n\nCommand line input:\n```\n206 4\n2 20 9 30\n```\n\nOutput: 214","active":true},{"id":"5f54cd3184f99b0004db1ff9","questionNumber":9,"questionText":"## Unauthorized Transactions\n\nIt is important that banks recognize unauthorized transactions in order to protect their clients. Leon has recently started working at a large credit card company where his role is to investigate fraudulent credit card transactions. He is attempting to sort transactions, depending on their fraud probability, into separate boxes.\n\nLet ***t*** = 2 mean that Leon has 2 types of transactions and 2 different boxes, both labelled from 0 to ***t***-1. The current organization of the transactions in each box can be shown using a matrix **M** (size ***t***x***t***). Consider **M** = [[8, 3], [3, 9]]:\n\n|       | Type 0 | Type 1 |\n|-------|--------|--------|\n| Box 0 | 8      | 3      |\n| Box 1 | 3      | 9      |\n\nIn this table, we can see in box 0 there are 8 transactions of type 0 and 3 transations of type 1. In box 1, there are 3 transactions of type 0 and 9 transactions of type 1. Leon is able to switch, in a single operation, two transactions in different boxes. He can switch a type 0 transaction from Box 1 with a type 1 transaction from Box 0. As shown below.\n\n|       | Type 0 | Type 1 |\n|-------|--------|--------|\n| Box 0 | 9      | 2      |\n| Box 1 | 2      | 10     |\n\nHe can continue doing this until he has all transactions of type 0 in box 0 and all transactions of type 1 in box 1. The sorted boxes are reflected in the Matrix table below. There can be multiple different ways of sorting the transactions.\n\n|       | Type 0 | Type 1 |\n|-------|--------|--------|\n| Box 0 | 11     | 0      |\n| Box 1 | 0      | 12     |\n\nThese switching operations need to fulfill the following condition in order for the transactions to be sorted:\n\n- Every box has only transactions of the same type. Two transactions of the same type cannot be located in two different boxes.\n\n\n# Input Format\n\nThe first line contains an integer ***n*** , the number of unsorted problems. Attempt to sort ***n*** different unsorted problems, each in the form of a matrix **M**.\n\nEach of the next ***n***  sets contains:\n\n- Integer ***t*** represents the number of boxes (rows) and transaction types (columns).\n\n- The next ***t*** lines contains integers, separated using a space, for row **M**[i].\n\n# Constraints\n\n- A box is a two dimensional array of integers, illustrating the number of transactions of each type found in each box.\n\n- 1 ≤ ***n***  ≤10\n\n- 1 ≤ ***t*** ≤ 100.\n\n- 0 ≤ **M**[box][Transaction type] ≤ 100000\n\n# Output Format\n\nFor each unsorted problem, print the string “Possible” if Leon can sort the transactions in the given matrix. Else, print the string “Impossible”. These strings should be separated by `,` when answering each unsorted problem.\n\n# Examples\n\n### Example 1\n\n### Input\n\n2\n\n3\n\n2 4 0\n\n3 0 1\n\n1 0 0\n\n2\n\n1 4\n\n5 4\n\n### Output \n\nPossible,Impossible\n\n### Explanation \n\nWe perform the following ***n***=2 unsorted problems.\n\nThe table below shows one way for which the first unsorted problem can be solved. Thus, we print “Possible”.\n\n|       | Type 0 | Type 1 | Type 2 |\n|-------|--------|--------|--------|\n| Box 0 | 6      | 0      | 0      |\n| Box 1 | 0      | 4      | 0      |\n| Box 2 | 0      | 0      | 1      |\n\nThe table below shows the matrix for the second unsorted problem:\n\n|       | Type 0 | Type 1 |\n|-------|--------|--------|\n| Box 0 | 1      | 4      |\n| Box 1 | 5      | 4      |\n\nNo matter how many times we attempt to switch transactions of type 0 and 1, we will never end up with box 0 only containing type 0 transactions and box 1 only containing type 1 transactions. Thus, we print \"Impossible\".","active":true}]